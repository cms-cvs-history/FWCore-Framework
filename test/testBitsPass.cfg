
process PROD  = {
	untracked PSet maxEvents = {untracked int32 input = 99}
 untracked  PSet options = {
   #untracked bool wantSummary=true
   include "FWCore/Framework/test/cmsExceptionsFatalOption.cff"
 }

 #service  = Tracer {  }

 source = EmptySource { }

 module m1a = IntProducer { int32 ivalue = 1 }
 module m2a = IntProducer { int32 ivalue = 2 }
 module m3a = IntProducer { int32 ivalue = 3 }
 module m4a = IntProducer { int32 ivalue = 4 }
 module m5a = IntProducer { int32 ivalue = 5 }
 module m6a = IntProducer { int32 ivalue = 6 }

 module m1b = IntProducer { int32 ivalue = 10 }
 module m2b = IntProducer { int32 ivalue = 20 }
 module m3b = IntProducer { int32 ivalue = 30 }
 module m4b = IntProducer { int32 ivalue = 40 }
 module m5b = IntProducer { int32 ivalue = 50 }
 module m6b = IntProducer { int32 ivalue = 60 }

 module a1 = TestResultAnalyzer	{
   untracked string name = "a1"
   untracked bool dump = true
 }

 module f1 = TestFilterModule {
   untracked bool onlyOne = true
   untracked int32 acceptValue = 30
 }

 module f2 = TestFilterModule {
   untracked bool onlyOne = true
   untracked int32 acceptValue = 70
 }

 module f3 = TestFilterModule {
   untracked bool onlyOne = true
   untracked int32 acceptValue = 12
 }

 module f4 = TestFilterModule {
   untracked bool onlyOne = false
   untracked int32 acceptValue = 30
 }

 module f5 = TestFilterModule {
   untracked bool onlyOne = false
   untracked int32 acceptValue = 70
 }

 module f6 = TestFilterModule {
   untracked bool onlyOne = false
   untracked int32 acceptValue = 12
 }

 module outp1a = SewerModule {
   string name = "for_f1"
   int32 shouldPass = 3
   untracked PSet SelectEvents = { vstring SelectEvents = { "p1a" } }
 }

 module outp2a = SewerModule {
   string name = "for_f2"
   int32 shouldPass = 1

   untracked PSet SelectEvents = { vstring SelectEvents = { "p2a" } }
 }

 module outp3a = SewerModule {
   string name = "for_f4_f5"
   int32 shouldPass = 70

   untracked PSet SelectEvents = { vstring SelectEvents = { "p4a","p5a" } }
 }

 module outp8a = SewerModule {
   string name = "for_!f5"
   int32 shouldPass = 29 

   untracked PSet SelectEvents = { vstring SelectEvents = { "!p5a" } }
 }

 module outp1b = SewerModule {
   string name = "for_!f1"
   int32 shouldPass = 96
   untracked PSet SelectEvents = { vstring SelectEvents = { "p1b" } }
 }

 module outp2b = SewerModule {
   string name = "for_!f2"
   int32 shouldPass = 98

   untracked PSet SelectEvents = { vstring SelectEvents = { "p2b" } }
 }

 module outp3b = SewerModule {
   string name = "for_!f4_!f5"
   int32 shouldPass = 69 # 30

   untracked PSet SelectEvents = { vstring SelectEvents = { "p4b","p5b" } }
 }

 module outp8b = SewerModule {
   string name = "for_!!f5"
   int32 shouldPass = 70

   untracked PSet SelectEvents = { vstring SelectEvents = { "!p5b" } }
 }

 module outp4 = SewerModule {
   string name = "for_*"
   int32 shouldPass = 74

   untracked PSet SelectEvents = { vstring SelectEvents = { "*" } }
 }

 module outp5 = SewerModule {
   string name = "for_!*"
   int32 shouldPass = 25

   untracked PSet SelectEvents = { vstring SelectEvents = { "!*" } }
 }

 module outp6 = SewerModule {
   string name = "for_*_!*"
   int32 shouldPass = 99

   untracked PSet SelectEvents = { vstring SelectEvents = { "*","!*" } }
 }

 module outp7 = SewerModule {
   string name = "for_none"
   int32 shouldPass = 99
 }


 path p1a = { f1,m1a }
 path p2a = { f2,m2a }
 path p3a = { f3,m3a }
 path p4a = { f4,m4a }
 path p5a = { f5,m5a }
 path p6a = { f6,m6a }
 #path p1b = { !f1,m1b }
 #path p2b = { !f2,m2b }
 #path p3b = { !f3,m3b }
 #path p4b = { !f4,m4b }
 #path p5b = { !f5,m5b }
 #path p6b = { !f6,m6b }
 # path p7 = { outp7 }

 endpath e1 = { a1 }
 endpath e2 = { outp1a,outp2a,outp3a,outp8a }
 #endpath e3 = { outp1b,outp2b,outp3b,outp8b }

 # need simple configuration to test the next ones
 endpath e4 = { outp4,outp5 }

 endpath e5 = { outp6 }
 endpath e6 = { outp7 }
}
